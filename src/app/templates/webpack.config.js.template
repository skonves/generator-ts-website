const path = require('path');
const webpack = require('webpack');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');

const mode =
  process.env['NODE_ENV'] === 'production' ? 'production' : 'development';

const config = {
  target: 'web',
  entry: './src/index.ts',
  mode,
  optimization: {
    splitChunks: {
      chunks: 'initial',
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name: 'vendor',
          chunks: 'all',
        },
      },
    },
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        use: 'ts-loader',
        exclude: /node_modules/,
      },
      {
        test: /\.less$/,
        use: [MiniCssExtractPlugin.loader, 'css-loader', 'less-loader'],
        exclude: /node_modules/,
      },
    ],
  },
  output: {
    filename: '[name].[contenthash].js',
    path: path.resolve(__dirname, 'dist'),
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './src/index.html',
    }),
  ],
};

if (mode === 'production') {
  // Include the hash in output files
  config.plugins.push(
    new MiniCssExtractPlugin({ filename: '[name].[contenthash].css' }),
  );
} else {
  // Use the dev server with HMR
  config.plugins.push(new webpack.HotModuleReplacementPlugin());
  config.devServer = {
    contentBase: path.join(__dirname, 'dist'),
    port: 9000,
    hot: true,
  };

  // Add 'css-hot-loader' to the less rule
  config.module.rules
    .find(rule => Array.isArray(rule.use) && rule.use.includes('css-loader'))
    .use.unshift('css-hot-loader');

  // Don't include the hash in output files
  config.plugins.push(new MiniCssExtractPlugin({ filename: '[name].css' }));
  config.output.filename = '[name].js';
}

module.exports = config;
